#########################################################################
#
# SwapInterface
#
# Copyright (c) 2011 Daniel Berenguer <dberenguer@usapiens.com>
#
# This file is part of the panStamp project.
#
# panStamp  is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# panStamp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with panLoader; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
# USA
#
#########################################################################
__author__="Daniel Berenguer"
__date__  ="Sep 28, 2011 1:09:12 PM$"
#########################################################################

from swap.SwapServer import SwapServer


class SwapInterface:
    """
    SWAP Interface superclass. Any SWAP application should derive from this one
    """
    def newMoteDetected(self, mote):
        """
        New mote detected by SWAP server
        
        'mote'  mote detected
        """
        pass


    def newParameterDetected(self, parameter):
        """
        New configuration parameter detected by SWAP server
        
        'parameter'  Endpoint detected
        """
        pass
    
    
    def newEndpointDetected(self, endpoint):
        """
        New endpoint detected by SWAP server
        
        'endpoint'  Endpoint detected
        """
        pass


    def moteStateChanged(self, mote):
        """
        Mote state changed
        
        'mote'  Mote having changed
        """
        pass


    def moteAddressChanged(self, mote):
        """
        Mote address changed
        
        'mote'  Mote having changed
        """
        pass


    def registerValueChanged(self, register):
        """
        Register value changed
        
        'register'  Register having changed
        """
        pass
    
    
    def endpointValueChanged(self, endpoint):
        """
        Endpoint value changed
        
        'endpoint'  Endpoint having changed
        """
        pass
    
    
    def parameterValueChanged(self, parameter):
        """
        Configuration parameter changed
        
        'parameter'  configuration parameter having changed
        """
        pass


    def getNbOfMotes(self):
        """
        Return the amounf of motes available in lstMotes
        """
        return self.server.getNbOfMotes()


    def getMote(self, index=None, address=None):
        """
        Return mote from list
        
        'index'    Index of the mote within lstMotes
        'address'  SWAP address of the mote
        """
        return self.server.getMote(index, address)


    def setMoteRegister(self, mote, regId, value):
        """
        Set new register value on wireless mote
        
        'mote'    Mote targeted by this command
        'regId'   Register ID
        'value'   New register value
        
        Return True if the command is correctly ack'ed. Return False otherwise
        """
        return self.server.setMoteRegister(mote, regId, value)


    def queryMoteRegister(self, mote, regId):
        """
        Query mote register, wait for response and return value
        Non re-entrant method!!
        
        'mote'    Mote to be queried
        'regID'   Register ID
        
        Return register value
        """
        return self.server.queryMoteRegister(mote, regId)


    def stop(self):
        """
        Stop SWAP server
        """
        self.server.stop()


    def __init__(self, verbose=False):
        """
        Class constructor
        
        'verbose'  Print out SWAP frames
        """       
        try:
            # Start SWAP server
            print "SWAP server starting... "
            self.server = SwapServer(self, verbose)
            # List of motes
            self.lstMotes = self.server.lstMotes
            print "SWAP server is now running... "
        except:
            raise
