#########################################################################
#
# XmlDevice
#
# Copyright (c) 2011 Daniel Berenguer <dberenguer@usapiens.com>
# 
# This file is part of the panStamp project.
# 
# panStamp  is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# panStamp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with panLoader; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 
# USA
#
#########################################################################
__author__="Daniel Berenguer"
__date__ ="$Aug 20, 2011 10:36:00 AM$"
#########################################################################

from xmltools.XmlSettings import XmlSettings
from swap.SwapEndpoint import SwapEndpoint
from swap.SwapCfgParam import SwapCfgParam
from swap.SwapRegister import SwapRegister
from swap.SwapValue import SwapValue
from swap.SwapDefs import SwapType
from swapexception.SwapException import SwapException

import os
import xml.etree.ElementTree as xml

class XmlUnit:
    """
    Endpoint units appearing in any XmlDevice object
    """
    def __init__(self, name="", factor=1, offset=0):
        """
        Class constructor
        """
        # Unit name
        self.name = name
        # Factor operator
        try:
            self.factor = int(factor)
        except ValueError:
            self.factor = float(factor)
        # Offset operator
        try:
            self.offset = int(offset)
        except ValueError:
            self.offset = float(offset)
      

class XmlDevice(object):
    """
    Device configuration settings
    """

    def getDefinition(self):
        """
        Read current config file
        """
        # Parse XML file
        tree = xml.parse(self.fileName)
        if tree is None:
            raise IOError(self.fileName  + " does not exist")
        # Get the root node
        root = tree.getroot()
        # Get manufacturer
        elem = root.find("developer")
        if elem is not None:
            self.manufacturer = elem.text
        # Get product name
        elem = root.find("product")
        if elem is not None:
            self.product = elem.text
        # Get Power Down flag
        elem = root.find("pwrdownmode")
        if elem is not None:
            self.pwrDownMode = (elem.text.lower() == "true")


    def getRegList(self, config=False):
        """
        Return list of registers

        'config'  Set to True in case of config registers. False for regular ones

        Return list of registers
        """
        # List of config registers belonging to the current device
        lstRegs = []

        # Parse XML file
        tree = xml.parse(self.fileName)
        if tree is None:
            return None
        # Get the root node
        root = tree.getroot()
        # Get manufacturer

        # List of register elements belonging to the device
        type = "regular"
        if config == True:
            type = "config"
        lstElemReg = root.findall(type + "/reg")
        if lstElemReg is not None:
            for reg in lstElemReg:
                # Get register id
                strRegId = reg.get("id")
                if strRegId is not None:
                    regId = int(strRegId)
                    # Get register name
                    regName = reg.get("name", default="")
                    # Create register from id and mote
                    swRegister = SwapRegister(self.mote, regId, regName)

                    # List of endpoints belonging to the register
                    if config == True:
                        elementName = "param"
                    else:
                        elementName = "endpoint"
                    lstElemParam = reg.findall(elementName)
                    for param in lstElemParam:
                        # Read XML fields
                        paramType = param.get("type", default="num")
                        paramDir = param.get("dir", default="inp")
                        paramName = param.get("name", default="")
                        paramPos = "0"
                        elem = param.find("position")
                        if elem is not None:
                            paramPos = elem.text
                        paramSize = "1"
                        elem = param.find("size")
                        if elem is not None:
                            paramSize = elem.text
                        paramDef = "0"
                        elem = param.find("default")
                        if elem is not None:
                            paramDef = elem.text
                        if paramType in [SwapType.NUMBER, SwapType.BINARY]:
                            try:
                                defVal = int(paramDef)
                            except ValueError:
                                raise SwapException("Default value " + str(paramDef) + " is not an integer")
                                return
                        else:
                            defVal = paramDef
                        regex = None
                        elem = param.find("verif")
                        if elem is not None:
                            verif = elem.text
                        # Get list of units
                        units = param.findall("units/unit")
                        lstUnits = None
                        if units is not None:
                            lstUnits = []
                            for unit in units:
                                name = unit.get("name", default=None)
                                factor = unit.get("factor", default=1)
                                offset = unit.get("offset", default=0)
                                xmlUnit = XmlUnit(name, factor, offset)
                                lstUnits.append(xmlUnit)

                        if config == True:
                            # Create SWAP config parameter
                            swParam = SwapCfgParam(register=swRegister, pType=paramType, name=paramName,
                                            position=paramPos, size=paramSize, default=defVal, verif=verif)
                        else:                          
                            # Create SWAP endpoint
                            swParam = SwapEndpoint(register=swRegister, pType=paramType, direction=paramDir, name=paramName,
                                            position=paramPos, size=paramSize, default=defVal, verif=verif, units=lstUnits)

                        # Add current parameter to the register
                        swRegister.add(swParam)

                    # Create empty value for the register
                    swRegister.value = SwapValue([0] * swRegister.getLength())
                    swRegister.update()                    
                    # Add endpoint to the list
                    lstRegs.append(swRegister)

        if len(lstRegs) == 0:
            return None
        else:
            return lstRegs


    def __init__(self, mote=None, manufId=None, prodId=None):
        """ Class constructor """
        # Device (mote)
        self.mote = mote
        # Name/path of the current configuration file
        self.fileName = None
        if manufId is not None and prodId is not None:
            self.fileName = XmlSettings.deviceDir + os.sep + "{0:X}".format(manufId) + os.sep + "{0:X}".format(prodId) + ".xml"
        # Manufacturer name
        self.manufacturer = None
        # Product name
        self.product = None
        # Power down mode (True or False)
        self.pwrDownMode = False

        if self.mote is not None:
            self.fileName = XmlSettings.deviceDir + os.sep + "{0:X}".format(self.mote.manufacturerId) + os.sep + "{0:X}".format(self.mote.productId) + ".xml"

        # Read definition parameters from XML file
        self.getDefinition()

