#########################################################################
#
# SwapManager
#
# Copyright (c) 2011 Daniel Berenguer <dberenguer@usapiens.com>
#
# This file is part of the panStamp project.
#
# panStamp  is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# panStamp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with panLoader; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
# USA
#
#########################################################################
__author__="Daniel Berenguer"
__date__ ="$Aug 21, 2011 4:30:47 PM$"
#########################################################################

from SwapBrowser import SwapBrowser
from LogWindow import LogFrame

from swap.SwapServer import SwapServer
from swap.SwapDefs import SwapState, SwapType
from swapexception.SwapException import SwapException

import wx

class SwapManager:
    """
    SWAP Management Class
    """
    def newMoteDetected(self, mote):
        """
        New mote detected by SWAP server
        
        'mote'  Mote object
        """
        if self.browser is not None:
            if self._printSWAP == True:
                print "New mote with address " + str(mote.address) + " : " + mote.definition.product + \
                " (by " + mote.definition.manufacturer + ")"
                
                # Append mote to the browsing tree
                self.browser.addMote(mote)


    def newEndpointDetected(self, endpoint):
        """
        New endpoint detected by SWAP server
        
        'endpoint'  Endpoint object
        """
        if self._printSWAP == True:
            print "New endpoint with Reg ID = " + str(endpoint.getRegId()) + " : " + endpoint.name


    def moteStateChanged(self, mote):
        """
        Mote state changed
        
        'mote' Mote object
        """
        if self._printSWAP == True:
            print "Mote with address " + str(mote.address) + " switched to \"" + \
            SwapState.toString(mote.state) + "\""
        # SYNC mode entered?
        if mote.state == SwapState.SYNC:
            if self.browser is not None:
                self.browser.syncReceived(mote)


    def moteAddressChanged(self, mote):
        """
        Mote address changed
        
        'mote'  Mote object
        """
        if self._printSWAP == True:
            print "Mote changed address to " + str(mote.address)


    def endpointValueChanged(self, endpoint):
        """
        Endpoint value changed
        
        'endpoint' Endpoint object
        """
        if self._printSWAP == True:
            print endpoint.name + " in address " + str(endpoint.getRegAddress()) + " changed to " + endpoint.getValueInAscii()
            
        # Update value in SWAP browser
        self.browser.updateEndpointInTree(endpoint)


    def paramValueChanged(self, param):
        """
        Config parameter value changed
        
        'param' Config parameter object
        """
        if self._printSWAP == True:
            print endpoint.name + " in address " + str(endpoint.getRegAddress()) + " changed to " + endpoint.getValueInAscii()
            
        # Update value in SWAP browser
        self.browser.updateEndpointInTree(endpoint)
        

    def getNbOfMotes(self):
        """
        Return the amounf of motes available in the list
        """
        return self.server.getNbOfMotes()


    def getNbOfEndpoints(self):
        """
        Return the amount of endpoints available in the list
        """
        return self.server.getNbOfEndpoints()


    def getMote(self, index=None, address=None):
        """
        Return mote from list
        """
        return self.server.getMote(index, address)


    def getEndpoint(self, index=None):
        """
        Return endpoint from list
        """
        return self.server.getEndpoint(index)


    def setMoteRegister(self, mote, regId, value):
        """
        Set new register value on wireless mote
        
        'mote'    Mote object
        'regId'   Register ID
        'value'   New mote value
        
        Return True if the command is correctly ack'ed. Return False otherwise
        """
        return self.server.setMoteRegister(mote, regId, value)


    def queryMoteRegister(self, mote, regId):
        """
        Query mote register, wait for response and return value
        
        'mote'    Mote object
        'regId'   Register ID
        
        Non re-entrant method!!
        """
        return self.server.queryMoteRegister(mote, regId)


    def stop(self):
        """
        Stop SWAP server
        """
        self.server.stop()


    def exit(self):
        """
        Exit application
        """
        self.app.Exit()
        self.app.ExitMainLoop()


    def __init__(self, verbose=False, monitor=False):
        """
        Class constructor
        """
        self.browser = None
        # Print SWAP activity
        self._printSWAP = monitor
        # Callbacks not being used
        self.registerValueChanged = None


        # wxPython app
        self.app = wx.PySimpleApp(0)
        wx.InitAllImageHandlers()
       
        # Start SWAP server
        try:
            print "SWAP server starting... "
            self.server = SwapServer(self, verbose)
            print "SWAP server is now running... "

            # Create SWAP Network Monitor window
            netMonitor = LogFrame("SWAP Network Monitor")
            netMonitor.Show(True)
            
            # Open SWAP browser
            self.browser = SwapBrowser(self, server=self.server, monitor=netMonitor)
            self.browser.SetSize(wx.Size(350,500))
            self.app.SetTopWindow(self.browser)
            self.browser.Show()
                    
            # Clear error file
            SwapException.clear()
        except SwapException as ex:
            ex.display()
            ex.log()

        self.app.MainLoop()
